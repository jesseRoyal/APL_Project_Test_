Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> VARIABLE
Rule 2     expression -> HASH VARIABLE DOT expression
Rule 3     expression -> LPAREN expression expression RPAREN

Terminals, with rules where they appear

DOT                  : 2
HASH                 : 2
LPAREN               : 3
RPAREN               : 3
VARIABLE             : 1 2
error                : 

Nonterminals, with rules where they appear

expression           : 2 3 3 0

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . VARIABLE
    (2) expression -> . HASH VARIABLE DOT expression
    (3) expression -> . LPAREN expression expression RPAREN

    VARIABLE        shift and go to state 2
    HASH            shift and go to state 3
    LPAREN          shift and go to state 4

    expression                     shift and go to state 1

state 1

    (0) S' -> expression .



state 2

    (1) expression -> VARIABLE .

    $end            reduce using rule 1 (expression -> VARIABLE .)
    VARIABLE        reduce using rule 1 (expression -> VARIABLE .)
    HASH            reduce using rule 1 (expression -> VARIABLE .)
    LPAREN          reduce using rule 1 (expression -> VARIABLE .)
    RPAREN          reduce using rule 1 (expression -> VARIABLE .)


state 3

    (2) expression -> HASH . VARIABLE DOT expression

    VARIABLE        shift and go to state 5


state 4

    (3) expression -> LPAREN . expression expression RPAREN
    (1) expression -> . VARIABLE
    (2) expression -> . HASH VARIABLE DOT expression
    (3) expression -> . LPAREN expression expression RPAREN

    VARIABLE        shift and go to state 2
    HASH            shift and go to state 3
    LPAREN          shift and go to state 4

    expression                     shift and go to state 6

state 5

    (2) expression -> HASH VARIABLE . DOT expression

    DOT             shift and go to state 7


state 6

    (3) expression -> LPAREN expression . expression RPAREN
    (1) expression -> . VARIABLE
    (2) expression -> . HASH VARIABLE DOT expression
    (3) expression -> . LPAREN expression expression RPAREN

    VARIABLE        shift and go to state 2
    HASH            shift and go to state 3
    LPAREN          shift and go to state 4

    expression                     shift and go to state 8

state 7

    (2) expression -> HASH VARIABLE DOT . expression
    (1) expression -> . VARIABLE
    (2) expression -> . HASH VARIABLE DOT expression
    (3) expression -> . LPAREN expression expression RPAREN

    VARIABLE        shift and go to state 2
    HASH            shift and go to state 3
    LPAREN          shift and go to state 4

    expression                     shift and go to state 9

state 8

    (3) expression -> LPAREN expression expression . RPAREN

    RPAREN          shift and go to state 10


state 9

    (2) expression -> HASH VARIABLE DOT expression .

    $end            reduce using rule 2 (expression -> HASH VARIABLE DOT expression .)
    VARIABLE        reduce using rule 2 (expression -> HASH VARIABLE DOT expression .)
    HASH            reduce using rule 2 (expression -> HASH VARIABLE DOT expression .)
    LPAREN          reduce using rule 2 (expression -> HASH VARIABLE DOT expression .)
    RPAREN          reduce using rule 2 (expression -> HASH VARIABLE DOT expression .)


state 10

    (3) expression -> LPAREN expression expression RPAREN .

    $end            reduce using rule 3 (expression -> LPAREN expression expression RPAREN .)
    VARIABLE        reduce using rule 3 (expression -> LPAREN expression expression RPAREN .)
    HASH            reduce using rule 3 (expression -> LPAREN expression expression RPAREN .)
    LPAREN          reduce using rule 3 (expression -> LPAREN expression expression RPAREN .)
    RPAREN          reduce using rule 3 (expression -> LPAREN expression expression RPAREN .)

